"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var THEME = _interopRequireWildcard(require("./Theme"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const TableRow = _ref => {
  let {
    width = '100%',
    onHandleItemRow,
    textStyle = {},
    itemStyle = {},
    dataRow = [],
    dataSpacing = []
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 1,
    onPress: onHandleItemRow,
    style: { ...styles.container,
      width: width
    }
  }, (dataSpacing === null || dataSpacing === void 0 ? void 0 : dataSpacing.length) != 0 && dataSpacing.map((itemWidth, idx) => {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      key: idx,
      style: {
        width: itemWidth,
        ...itemStyle
      }
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: {
        color: THEME.WHITE_COLOR,
        ...textStyle
      }
    }, // _.get(dataRow[idx], [keyDataRow]) ?  _.get(dataRow[idx], [keyDataRow]) : ''
    dataRow[idx] ? dataRow[idx] : ''));
  }));
};

const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    flexWrap: 'wrap'
  }
});

var _default = TableRow;
exports.default = _default;
//# sourceMappingURL=TableRow.js.map