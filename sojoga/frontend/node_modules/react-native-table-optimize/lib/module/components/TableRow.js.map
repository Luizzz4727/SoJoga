{"version":3,"sources":["TableRow.tsx"],"names":["React","StyleSheet","View","TouchableOpacity","Text","THEME","TableRow","width","onHandleItemRow","textStyle","itemStyle","dataRow","dataSpacing","styles","container","length","map","itemWidth","idx","color","WHITE_COLOR","create","flexDirection","flexWrap"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,UADF,EAEEC,IAFF,EAGEC,gBAHF,EAIEC,IAJF,QAQO,cARP;AAUA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;;AAWA,MAAMC,QAAqC,GAAG,QAQrB;AAAA,MARsB;AAC7CC,IAAAA,KAAK,GAAG,MADqC;AAE7CC,IAAAA,eAF6C;AAG7CC,IAAAA,SAAS,GAAG,EAHiC;AAI7CC,IAAAA,SAAS,GAAG,EAJiC;AAK7CC,IAAAA,OAAO,GAAG,EALmC;AAM7CC,IAAAA,WAAW,GAAG;AAN+B,GAQtB;AAEvB,sBACE,oBAAC,gBAAD;AACE,IAAA,aAAa,EAAE,CADjB;AAEE,IAAA,OAAO,EAAEJ,eAFX;AAGE,IAAA,KAAK,EAAE,EAAC,GAAGK,MAAM,CAACC,SAAX;AAAsBP,MAAAA,KAAK,EAAEA;AAA7B;AAHT,KAMI,CAAAK,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEG,MAAb,KAAuB,CAAvB,IAA4BH,WAAW,CAACI,GAAZ,CAAgB,CAACC,SAAD,EAAYC,GAAZ,KAAoB;AAC9D,wBACI,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,KAAK,EAAE;AACLX,QAAAA,KAAK,EAAEU,SADF;AAEL,WAAIP;AAFC;AAFT,oBAOE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLS,QAAAA,KAAK,EAAEd,KAAK,CAACe,WADR;AAEL,WAAIX;AAFC;AADT,OAOI;AACAE,IAAAA,OAAO,CAACO,GAAD,CAAP,GAAeP,OAAO,CAACO,GAAD,CAAtB,GAA8B,EARlC,CAPF,CADJ;AAqBD,GAtB2B,CANhC,CADF;AAiCD,CA3CD;;AA6CA,MAAML,MAAM,GAAGZ,UAAU,CAACoB,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,aAAa,EAAE,KADN;AAETC,IAAAA,QAAQ,EAAE;AAFD;AADoB,CAAlB,CAAf;AAOA,eAAejB,QAAf","sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  View,\n  TouchableOpacity,\n  Text,\n  StyleProp,\n  ViewStyle,\n  TextStyle\n} from 'react-native';\n\nimport * as THEME from './Theme';\n\nexport interface TableRowInterface {\n  width?: string;\n  onHandleItemRow?: () => void | false;\n  textStyle?: StyleProp<TextStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  dataRow?: Array<any>;\n  dataSpacing?: Array<string>;\n}\n\nconst TableRow: React.FC<TableRowInterface> = ({\n  width = '100%',\n  onHandleItemRow,\n  textStyle = {},\n  itemStyle = {},\n  dataRow = [],\n  dataSpacing = [],\n  \n}: TableRowInterface) => {\n\n  return (\n    <TouchableOpacity \n      activeOpacity={1}\n      onPress={onHandleItemRow}\n      style={{...styles.container, width: width,}}\n    >\n      {\n        dataSpacing?.length != 0 && dataSpacing.map((itemWidth, idx) => {\n          return (\n              <View\n                key={idx}\n                style={{\n                  width: itemWidth,\n                  ...(itemStyle as object),\n                }}\n              >\n                <Text\n                  style={{\n                    color: THEME.WHITE_COLOR,\n                    ...(textStyle as object),\n                  }}\n                >\n                  {\n                    // _.get(dataRow[idx], [keyDataRow]) ?  _.get(dataRow[idx], [keyDataRow]) : ''\n                    dataRow[idx] ? dataRow[idx] : ''\n                  }\n                </Text>\n              </View>\n          )\n        })\n      }\n    </TouchableOpacity>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n});\n\nexport default TableRow;"]}