{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport TabBarIndicator from \"./TabBarIndicator\";\nimport TabBarItem from \"./TabBarItem\";\nimport useAnimatedValue from \"./useAnimatedValue\";\n\nvar Separator = function Separator(_ref) {\n  var width = _ref.width;\n  return React.createElement(View, {\n    style: {\n      width: width\n    }\n  });\n};\n\nvar getFlattenedTabWidth = function getFlattenedTabWidth(style) {\n  var tabStyle = StyleSheet.flatten(style);\n  return tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width;\n};\n\nvar getComputedTabWidth = function getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        var width = parseFloat(flattenedWidth);\n\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n\n  }\n\n  if (scrollEnabled) {\n    return layout.width / 5 * 2;\n  }\n\n  return layout.width / routes.length;\n};\n\nvar getMaxScrollDistance = function getMaxScrollDistance(tabBarWidth, layoutWidth) {\n  return tabBarWidth - layoutWidth;\n};\n\nvar getTranslateX = function getTranslateX(scrollAmount, maxScrollDistance) {\n  return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1)) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n};\n\nvar getTabBarWidth = function getTabBarWidth(_ref2) {\n  var navigationState = _ref2.navigationState,\n      layout = _ref2.layout,\n      gap = _ref2.gap,\n      scrollEnabled = _ref2.scrollEnabled,\n      flattenedTabWidth = _ref2.flattenedTabWidth,\n      tabWidths = _ref2.tabWidths;\n  var routes = navigationState.routes;\n  return routes.reduce(function (acc, _, i) {\n    return acc + (i > 0 ? gap !== null && gap !== void 0 ? gap : 0 : 0) + getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n  }, 0);\n};\n\nvar normalizeScrollValue = function normalizeScrollValue(_ref3) {\n  var layout = _ref3.layout,\n      navigationState = _ref3.navigationState,\n      gap = _ref3.gap,\n      scrollEnabled = _ref3.scrollEnabled,\n      tabWidths = _ref3.tabWidths,\n      value = _ref3.value,\n      flattenedTabWidth = _ref3.flattenedTabWidth;\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nvar getScrollAmount = function getScrollAmount(_ref4) {\n  var layout = _ref4.layout,\n      navigationState = _ref4.navigationState,\n      gap = _ref4.gap,\n      scrollEnabled = _ref4.scrollEnabled,\n      flattenedTabWidth = _ref4.flattenedTabWidth,\n      tabWidths = _ref4.tabWidths;\n  var centerDistance = Array.from({\n    length: navigationState.index + 1\n  }).reduce(function (total, _, i) {\n    var tabWidth = getComputedTabWidth(i, layout, navigationState.routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    return total + (navigationState.index === i ? (tabWidth + (gap !== null && gap !== void 0 ? gap : 0)) / 2 : tabWidth + (gap !== null && gap !== void 0 ? gap : 0));\n  }, 0);\n  var scrollAmount = centerDistance - layout.width / 2;\n  return normalizeScrollValue({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    value: scrollAmount,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n};\n\nvar getLabelTextDefault = function getLabelTextDefault(_ref5) {\n  var route = _ref5.route;\n  return route.title;\n};\n\nvar getAccessibleDefault = function getAccessibleDefault(_ref6) {\n  var route = _ref6.route;\n  return typeof route.accessible !== 'undefined' ? route.accessible : true;\n};\n\nvar getAccessibilityLabelDefault = function getAccessibilityLabelDefault(_ref7) {\n  var route = _ref7.route;\n  return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n};\n\nvar renderIndicatorDefault = function renderIndicatorDefault(props) {\n  return React.createElement(TabBarIndicator, props);\n};\n\nvar getTestIdDefault = function getTestIdDefault(_ref8) {\n  var route = _ref8.route;\n  return route.testID;\n};\n\nvar MEASURE_PER_BATCH = 10;\nexport default function TabBar(_ref9) {\n  var _ref9$getLabelText = _ref9.getLabelText,\n      getLabelText = _ref9$getLabelText === void 0 ? getLabelTextDefault : _ref9$getLabelText,\n      _ref9$getAccessible = _ref9.getAccessible,\n      getAccessible = _ref9$getAccessible === void 0 ? getAccessibleDefault : _ref9$getAccessible,\n      _ref9$getAccessibilit = _ref9.getAccessibilityLabel,\n      getAccessibilityLabel = _ref9$getAccessibilit === void 0 ? getAccessibilityLabelDefault : _ref9$getAccessibilit,\n      _ref9$getTestID = _ref9.getTestID,\n      getTestID = _ref9$getTestID === void 0 ? getTestIdDefault : _ref9$getTestID,\n      _ref9$renderIndicator = _ref9.renderIndicator,\n      renderIndicator = _ref9$renderIndicator === void 0 ? renderIndicatorDefault : _ref9$renderIndicator,\n      _ref9$gap = _ref9.gap,\n      gap = _ref9$gap === void 0 ? 0 : _ref9$gap,\n      scrollEnabled = _ref9.scrollEnabled,\n      jumpTo = _ref9.jumpTo,\n      navigationState = _ref9.navigationState,\n      position = _ref9.position,\n      activeColor = _ref9.activeColor,\n      bounces = _ref9.bounces,\n      contentContainerStyle = _ref9.contentContainerStyle,\n      inactiveColor = _ref9.inactiveColor,\n      indicatorContainerStyle = _ref9.indicatorContainerStyle,\n      indicatorStyle = _ref9.indicatorStyle,\n      labelStyle = _ref9.labelStyle,\n      onTabLongPress = _ref9.onTabLongPress,\n      onTabPress = _ref9.onTabPress,\n      pressColor = _ref9.pressColor,\n      pressOpacity = _ref9.pressOpacity,\n      renderBadge = _ref9.renderBadge,\n      renderIcon = _ref9.renderIcon,\n      renderLabel = _ref9.renderLabel,\n      renderTabBarItem = _ref9.renderTabBarItem,\n      style = _ref9.style,\n      tabStyle = _ref9.tabStyle,\n      testID = _ref9.testID;\n\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      tabWidths = _React$useState4[0],\n      setTabWidths = _React$useState4[1];\n\n  var flatListRef = React.useRef(null);\n  var isFirst = React.useRef(true);\n  var scrollAmount = useAnimatedValue(0);\n  var measuredTabWidths = React.useRef({});\n  var routes = navigationState.routes;\n  var flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  var isWidthDynamic = flattenedTabWidth === 'auto';\n  var scrollOffset = getScrollAmount({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var hasMeasuredTabWidths = Boolean(layout.width) && routes.slice(0, navigationState.index).every(function (r) {\n    return typeof tabWidths[r.key] === 'number';\n  });\n  React.useEffect(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n\n    if (scrollEnabled) {\n      var _flatListRef$current;\n\n      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToOffset({\n        offset: scrollOffset,\n        animated: true\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      return layout.width === width && layout.height === height ? layout : {\n        width: width,\n        height: height\n      };\n    });\n  };\n\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  var separatorPercent = separatorsWidth / tabBarWidth * 100;\n  var tabBarWidthPercent = routes.length * 40 + \"%\";\n  var translateX = React.useMemo(function () {\n    return getTranslateX(scrollAmount, getMaxScrollDistance(tabBarWidth, layout.width));\n  }, [layout.width, scrollAmount, tabBarWidth]);\n  var renderItem = React.useCallback(function (_ref10) {\n    var route = _ref10.item,\n        index = _ref10.index;\n    var props = {\n      key: route.key,\n      position: position,\n      route: route,\n      navigationState: navigationState,\n      getAccessibilityLabel: getAccessibilityLabel,\n      getAccessible: getAccessible,\n      getLabelText: getLabelText,\n      getTestID: getTestID,\n      renderBadge: renderBadge,\n      renderIcon: renderIcon,\n      renderLabel: renderLabel,\n      activeColor: activeColor,\n      inactiveColor: inactiveColor,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      onLayout: isWidthDynamic ? function (e) {\n        measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n        if (routes.length > MEASURE_PER_BATCH && index === MEASURE_PER_BATCH && routes.slice(0, MEASURE_PER_BATCH).every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        } else if (routes.every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        }\n      } : undefined,\n      onPress: function onPress() {\n        var event = {\n          route: route,\n          defaultPrevented: false,\n          preventDefault: function preventDefault() {\n            event.defaultPrevented = true;\n          }\n        };\n        onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n        if (event.defaultPrevented) {\n          return;\n        }\n\n        jumpTo(route.key);\n      },\n      onLongPress: function onLongPress() {\n        return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n          route: route\n        });\n      },\n      labelStyle: labelStyle,\n      style: tabStyle,\n      defaultTabWidth: !isWidthDynamic ? getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, getFlattenedTabWidth(tabStyle)) : undefined\n    };\n    return React.createElement(React.Fragment, null, gap > 0 && index > 0 ? React.createElement(Separator, {\n      width: gap\n    }) : null, renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props));\n  }, [activeColor, gap, getAccessibilityLabel, getAccessible, getLabelText, getTestID, inactiveColor, isWidthDynamic, jumpTo, labelStyle, layout, navigationState, onTabLongPress, onTabPress, position, pressColor, pressOpacity, renderBadge, renderIcon, renderLabel, renderTabBarItem, routes, scrollEnabled, tabStyle, tabWidths]);\n  var keyExtractor = React.useCallback(function (item) {\n    return item.key;\n  }, []);\n  var contentContainerStyleMemoized = React.useMemo(function () {\n    return [styles.tabContent, scrollEnabled ? {\n      width: tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent\n    } : styles.container, contentContainerStyle];\n  }, [contentContainerStyle, scrollEnabled, separatorsWidth, tabBarWidth, tabBarWidthPercent]);\n  var handleScroll = React.useMemo(function () {\n    return Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: scrollAmount\n        }\n      }\n    }], {\n      useNativeDriver: true\n    });\n  }, [scrollAmount]);\n  var handleViewableItemsChanged = useLatestCallback(function (_ref11) {\n    var changed = _ref11.changed;\n\n    if (routes.length <= MEASURE_PER_BATCH) {\n      return;\n    }\n\n    var item = changed[changed.length - 1];\n    var index = (item === null || item === void 0 ? void 0 : item.index) || 0;\n\n    if (item.isViewable && (index % 10 === 0 || index === navigationState.index || index === routes.length - 1)) {\n      setTabWidths(_objectSpread({}, measuredTabWidths.current));\n    }\n  });\n  return React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [styles.tabBar, style]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.indicatorContainer, scrollEnabled ? {\n      transform: [{\n        translateX: translateX\n      }]\n    } : null, tabBarWidth > separatorsWidth ? {\n      width: tabBarWidth - separatorsWidth\n    } : scrollEnabled ? {\n      width: tabBarWidthPercent\n    } : null, indicatorContainerStyle]\n  }, renderIndicator({\n    position: position,\n    layout: layout,\n    navigationState: navigationState,\n    jumpTo: jumpTo,\n    width: isWidthDynamic ? 'auto' : (100 - separatorPercent) / routes.length + \"%\",\n    style: indicatorStyle,\n    getTabWidth: function getTabWidth(i) {\n      return getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    },\n    gap: gap\n  })), React.createElement(View, {\n    style: styles.scroll\n  }, React.createElement(Animated.FlatList, {\n    data: routes,\n    keyExtractor: keyExtractor,\n    horizontal: true,\n    accessibilityRole: \"tablist\",\n    keyboardShouldPersistTaps: \"handled\",\n    scrollEnabled: scrollEnabled,\n    bounces: bounces,\n    initialNumToRender: MEASURE_PER_BATCH,\n    onViewableItemsChanged: handleViewableItemsChanged,\n    alwaysBounceHorizontal: false,\n    scrollsToTop: false,\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    automaticallyAdjustContentInsets: false,\n    overScrollMode: \"never\",\n    contentContainerStyle: contentContainerStyleMemoized,\n    scrollEventThrottle: 16,\n    renderItem: renderItem,\n    onScroll: handleScroll,\n    ref: flatListRef,\n    testID: testID\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["TabBar.tsx"],"names":["Separator","width","getFlattenedTabWidth","style","tabStyle","StyleSheet","getComputedTabWidth","flattenedWidth","tabWidths","routes","parseFloat","Number","layout","getMaxScrollDistance","tabBarWidth","getTranslateX","Animated","Platform","I18nManager","getTabBarWidth","acc","i","gap","normalizeScrollValue","flattenedTabWidth","navigationState","scrollEnabled","maxDistance","scrollValue","Math","getScrollAmount","centerDistance","length","tabWidth","total","scrollAmount","value","getLabelTextDefault","route","getAccessibleDefault","getAccessibilityLabelDefault","renderIndicatorDefault","props","getTestIdDefault","MEASURE_PER_BATCH","getLabelText","getAccessible","getAccessibilityLabel","getTestID","renderIndicator","testID","height","React","flatListRef","isFirst","useAnimatedValue","measuredTabWidths","isWidthDynamic","scrollOffset","hasMeasuredTabWidths","Boolean","r","offset","animated","handleLayout","e","setLayout","separatorsWidth","separatorPercent","tabBarWidthPercent","translateX","renderItem","item","index","key","position","renderBadge","renderIcon","renderLabel","activeColor","inactiveColor","pressColor","pressOpacity","onLayout","setTabWidths","current","onPress","event","defaultPrevented","preventDefault","onTabPress","jumpTo","onLongPress","onTabLongPress","labelStyle","defaultTabWidth","undefined","renderTabBarItem","keyExtractor","contentContainerStyleMemoized","styles","handleScroll","nativeEvent","contentOffset","x","useNativeDriver","handleViewableItemsChanged","useLatestCallback","changed","transform","getTabWidth","scroll","container","flex","overflow","default","web","tabBar","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","shadowOffset","zIndex","tabContent","flexDirection","flexWrap","indicatorContainer","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  FlatList,\n  I18nManager,\n  LayoutChangeEvent,\n  ListRenderItemInfo,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n  ViewToken,\n} from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\n\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport type {\n  Event,\n  Layout,\n  NavigationState,\n  Route,\n  Scene,\n  SceneRendererProps,\n} from './types';\nimport useAnimatedValue from './useAnimatedValue';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText?: (scene: Scene<T>) => string | undefined;\n  getAccessible?: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel?: (scene: Scene<T>) => string | undefined;\n  getTestID?: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator?: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gap?: number;\n  testID?: string;\n};\n\ntype FlattenedTabWidth = string | number | undefined;\n\nconst Separator = ({ width }: { width: number }) => {\n  return <View style={{ width }} />;\n};\n\nconst getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n  const tabStyle = StyleSheet.flatten(style);\n\n  return tabStyle?.width;\n};\n\nconst getComputedTabWidth = (\n  index: number,\n  layout: Layout,\n  routes: Route[],\n  scrollEnabled: boolean | undefined,\n  tabWidths: { [key: string]: number },\n  flattenedWidth: FlattenedTabWidth\n) => {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        const width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n\n  if (scrollEnabled) {\n    return (layout.width / 5) * 2;\n  }\n  return layout.width / routes.length;\n};\n\nconst getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n  tabBarWidth - layoutWidth;\n\nconst getTranslateX = (\n  scrollAmount: Animated.Value,\n  maxScrollDistance: number\n) =>\n  Animated.multiply(\n    Platform.OS === 'android' && I18nManager.isRTL\n      ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n      : scrollAmount,\n    I18nManager.isRTL ? 1 : -1\n  );\n\nconst getTabBarWidth = <T extends Route>({\n  navigationState,\n  layout,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'navigationState' | 'gap' | 'layout' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const { routes } = navigationState;\n\n  return routes.reduce<number>(\n    (acc, _, i) =>\n      acc +\n      (i > 0 ? gap ?? 0 : 0) +\n      getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedTabWidth\n      ),\n    0\n  );\n};\n\nconst normalizeScrollValue = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  tabWidths,\n  value,\n  flattenedTabWidth,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'gap' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  value: number;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n  const maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    // On Android, scroll value is not applied in reverse in RTL\n    // so we need to manually adjust it to apply correct value\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nconst getScrollAmount = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'scrollEnabled' | 'gap'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const centerDistance = Array.from({\n    length: navigationState.index + 1,\n  }).reduce<number>((total, _, i) => {\n    const tabWidth = getComputedTabWidth(\n      i,\n      layout,\n      navigationState.routes,\n      scrollEnabled,\n      tabWidths,\n      flattenedTabWidth\n    );\n\n    // To get the current index centered we adjust scroll amount by width of indexes\n    // 0 through (i - 1) and add half the width of current index i\n    return (\n      total +\n      (navigationState.index === i\n        ? (tabWidth + (gap ?? 0)) / 2\n        : tabWidth + (gap ?? 0))\n    );\n  }, 0);\n\n  const scrollAmount = centerDistance - layout.width / 2;\n\n  return normalizeScrollValue({\n    layout,\n    navigationState,\n    tabWidths,\n    value: scrollAmount,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n};\n\nconst getLabelTextDefault = ({ route }: Scene<Route>) => route.title;\n\nconst getAccessibleDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessible !== 'undefined' ? route.accessible : true;\n\nconst getAccessibilityLabelDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessibilityLabel === 'string'\n    ? route.accessibilityLabel\n    : typeof route.title === 'string'\n    ? route.title\n    : undefined;\n\nconst renderIndicatorDefault = (props: IndicatorProps<Route>) => (\n  <TabBarIndicator {...props} />\n);\n\nconst getTestIdDefault = ({ route }: Scene<Route>) => route.testID;\n\n// How many items measurements should we update per batch.\n// Defaults to 10, since that's whats FlatList is using in initialNumToRender.\nconst MEASURE_PER_BATCH = 10;\n\nexport default function TabBar<T extends Route>({\n  getLabelText = getLabelTextDefault,\n  getAccessible = getAccessibleDefault,\n  getAccessibilityLabel = getAccessibilityLabelDefault,\n  getTestID = getTestIdDefault,\n  renderIndicator = renderIndicatorDefault,\n  gap = 0,\n  scrollEnabled,\n  jumpTo,\n  navigationState,\n  position,\n  activeColor,\n  bounces,\n  contentContainerStyle,\n  inactiveColor,\n  indicatorContainerStyle,\n  indicatorStyle,\n  labelStyle,\n  onTabLongPress,\n  onTabPress,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  renderLabel,\n  renderTabBarItem,\n  style,\n  tabStyle,\n  testID,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState<Layout>({ width: 0, height: 0 });\n  const [tabWidths, setTabWidths] = React.useState<Record<string, number>>({});\n  const flatListRef = React.useRef<FlatList | null>(null);\n  const isFirst = React.useRef(true);\n  const scrollAmount = useAnimatedValue(0);\n  const measuredTabWidths = React.useRef<Record<string, number>>({});\n\n  const { routes } = navigationState;\n  const flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  const isWidthDynamic = flattenedTabWidth === 'auto';\n  const scrollOffset = getScrollAmount({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const hasMeasuredTabWidths =\n    Boolean(layout.width) &&\n    routes\n      .slice(0, navigationState.index)\n      .every((r) => typeof tabWidths[r.key] === 'number');\n\n  React.useEffect(() => {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n\n    if (scrollEnabled) {\n      flatListRef.current?.scrollToOffset({\n        offset: scrollOffset,\n        animated: true,\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) =>\n      layout.width === width && layout.height === height\n        ? layout\n        : { width, height }\n    );\n  };\n\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  const separatorPercent = (separatorsWidth / tabBarWidth) * 100;\n  const tabBarWidthPercent = `${routes.length * 40}%`;\n\n  const translateX = React.useMemo(\n    () =>\n      getTranslateX(\n        scrollAmount,\n        getMaxScrollDistance(tabBarWidth, layout.width)\n      ),\n    [layout.width, scrollAmount, tabBarWidth]\n  );\n\n  const renderItem = React.useCallback(\n    ({ item: route, index }: ListRenderItemInfo<T>) => {\n      const props: TabBarItemProps<T> & { key: string } = {\n        key: route.key,\n        position: position,\n        route: route,\n        navigationState: navigationState,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessible: getAccessible,\n        getLabelText: getLabelText,\n        getTestID: getTestID,\n        renderBadge: renderBadge,\n        renderIcon: renderIcon,\n        renderLabel: renderLabel,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor,\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        onLayout: isWidthDynamic\n          ? (e: LayoutChangeEvent) => {\n              measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n              // When we have measured widths for all of the tabs, we should updates the state\n              // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n              // If we have more than 10 routes divide updating tabWidths into multiple batches. Here we update only first batch of 10 items.\n              if (\n                routes.length > MEASURE_PER_BATCH &&\n                index === MEASURE_PER_BATCH &&\n                routes\n                  .slice(0, MEASURE_PER_BATCH)\n                  .every(\n                    (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                  )\n              ) {\n                setTabWidths({ ...measuredTabWidths.current });\n              } else if (\n                routes.every(\n                  (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                )\n              ) {\n                // When we have measured widths for all of the tabs, we should updates the state\n                // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                setTabWidths({ ...measuredTabWidths.current });\n              }\n            }\n          : undefined,\n        onPress: () => {\n          const event: Scene<T> & Event = {\n            route,\n            defaultPrevented: false,\n            preventDefault: () => {\n              event.defaultPrevented = true;\n            },\n          };\n\n          onTabPress?.(event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          jumpTo(route.key);\n        },\n        onLongPress: () => onTabLongPress?.({ route }),\n        labelStyle: labelStyle,\n        style: tabStyle,\n        // Calculate the deafult width for tab for FlatList to work\n        defaultTabWidth: !isWidthDynamic\n          ? getComputedTabWidth(\n              index,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              getFlattenedTabWidth(tabStyle)\n            )\n          : undefined,\n      };\n\n      return (\n        <>\n          {gap > 0 && index > 0 ? <Separator width={gap} /> : null}\n          {renderTabBarItem ? (\n            renderTabBarItem(props)\n          ) : (\n            <TabBarItem {...props} />\n          )}\n        </>\n      );\n    },\n    [\n      activeColor,\n      gap,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      inactiveColor,\n      isWidthDynamic,\n      jumpTo,\n      labelStyle,\n      layout,\n      navigationState,\n      onTabLongPress,\n      onTabPress,\n      position,\n      pressColor,\n      pressOpacity,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      routes,\n      scrollEnabled,\n      tabStyle,\n      tabWidths,\n    ]\n  );\n\n  const keyExtractor = React.useCallback((item: T) => item.key, []);\n\n  const contentContainerStyleMemoized = React.useMemo(\n    () => [\n      styles.tabContent,\n      scrollEnabled\n        ? {\n            width:\n              tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent,\n          }\n        : styles.container,\n      contentContainerStyle,\n    ],\n    [\n      contentContainerStyle,\n      scrollEnabled,\n      separatorsWidth,\n      tabBarWidth,\n      tabBarWidthPercent,\n    ]\n  );\n\n  const handleScroll = React.useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              contentOffset: { x: scrollAmount },\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    [scrollAmount]\n  );\n\n  const handleViewableItemsChanged = useLatestCallback(\n    ({ changed }: { changed: ViewToken[] }) => {\n      if (routes.length <= MEASURE_PER_BATCH) {\n        return;\n      }\n      // Get next vievable item\n      const item = changed[changed.length - 1];\n      const index = item?.index || 0;\n      if (\n        item.isViewable &&\n        (index % 10 === 0 ||\n          index === navigationState.index ||\n          index === routes.length - 1)\n      ) {\n        setTabWidths({ ...measuredTabWidths.current });\n      }\n    }\n  );\n\n  return (\n    <Animated.View onLayout={handleLayout} style={[styles.tabBar, style]}>\n      <Animated.View\n        pointerEvents=\"none\"\n        style={[\n          styles.indicatorContainer,\n          scrollEnabled ? { transform: [{ translateX }] as any } : null,\n          tabBarWidth > separatorsWidth\n            ? { width: tabBarWidth - separatorsWidth }\n            : scrollEnabled\n            ? { width: tabBarWidthPercent }\n            : null,\n          indicatorContainerStyle,\n        ]}\n      >\n        {renderIndicator({\n          position,\n          layout,\n          navigationState,\n          jumpTo,\n          width: isWidthDynamic\n            ? 'auto'\n            : `${(100 - separatorPercent) / routes.length}%`,\n          style: indicatorStyle,\n          getTabWidth: (i: number) =>\n            getComputedTabWidth(\n              i,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              flattenedTabWidth\n            ),\n          gap,\n        })}\n      </Animated.View>\n      <View style={styles.scroll}>\n        <Animated.FlatList\n          data={routes as Animated.WithAnimatedValue<T>[]}\n          keyExtractor={keyExtractor}\n          horizontal\n          accessibilityRole=\"tablist\"\n          keyboardShouldPersistTaps=\"handled\"\n          scrollEnabled={scrollEnabled}\n          bounces={bounces}\n          initialNumToRender={MEASURE_PER_BATCH}\n          onViewableItemsChanged={handleViewableItemsChanged}\n          alwaysBounceHorizontal={false}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          automaticallyAdjustContentInsets={false}\n          overScrollMode=\"never\"\n          contentContainerStyle={contentContainerStyleMemoized}\n          scrollEventThrottle={16}\n          renderItem={renderItem}\n          onScroll={handleScroll}\n          ref={flatListRef}\n          testID={testID}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}