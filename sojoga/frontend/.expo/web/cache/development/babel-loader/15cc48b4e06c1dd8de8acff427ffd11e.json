{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pager from \"./Pager\";\nimport SceneView from \"./SceneView\";\nimport TabBar from \"./TabBar\";\nexport default function TabView(_ref) {\n  var onIndexChange = _ref.onIndexChange,\n      navigationState = _ref.navigationState,\n      renderScene = _ref.renderScene,\n      initialLayout = _ref.initialLayout,\n      _ref$keyboardDismissM = _ref.keyboardDismissMode,\n      keyboardDismissMode = _ref$keyboardDismissM === void 0 ? 'auto' : _ref$keyboardDismissM,\n      _ref$lazy = _ref.lazy,\n      lazy = _ref$lazy === void 0 ? false : _ref$lazy,\n      _ref$lazyPreloadDista = _ref.lazyPreloadDistance,\n      lazyPreloadDistance = _ref$lazyPreloadDista === void 0 ? 0 : _ref$lazyPreloadDista,\n      onSwipeStart = _ref.onSwipeStart,\n      onSwipeEnd = _ref.onSwipeEnd,\n      _ref$renderLazyPlaceh = _ref.renderLazyPlaceholder,\n      renderLazyPlaceholder = _ref$renderLazyPlaceh === void 0 ? function () {\n    return null;\n  } : _ref$renderLazyPlaceh,\n      _ref$renderTabBar = _ref.renderTabBar,\n      renderTabBar = _ref$renderTabBar === void 0 ? function (props) {\n    return React.createElement(TabBar, props);\n  } : _ref$renderTabBar,\n      sceneContainerStyle = _ref.sceneContainerStyle,\n      pagerStyle = _ref.pagerStyle,\n      style = _ref.style,\n      _ref$swipeEnabled = _ref.swipeEnabled,\n      swipeEnabled = _ref$swipeEnabled === void 0 ? true : _ref$swipeEnabled,\n      _ref$tabBarPosition = _ref.tabBarPosition,\n      tabBarPosition = _ref$tabBarPosition === void 0 ? 'top' : _ref$tabBarPosition,\n      _ref$animationEnabled = _ref.animationEnabled,\n      animationEnabled = _ref$animationEnabled === void 0 ? true : _ref$animationEnabled;\n\n  var _React$useState = React.useState(_objectSpread({\n    width: 0,\n    height: 0\n  }, initialLayout)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var jumpToIndex = function jumpToIndex(index) {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (prevLayout) {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return {\n        height: height,\n        width: width\n      };\n    });\n  };\n\n  return React.createElement(View, {\n    onLayout: handleLayout,\n    style: [styles.pager, style]\n  }, React.createElement(Pager, {\n    layout: layout,\n    navigationState: navigationState,\n    keyboardDismissMode: keyboardDismissMode,\n    swipeEnabled: swipeEnabled,\n    onSwipeStart: onSwipeStart,\n    onSwipeEnd: onSwipeEnd,\n    onIndexChange: jumpToIndex,\n    animationEnabled: animationEnabled,\n    style: pagerStyle\n  }, function (_ref2) {\n    var position = _ref2.position,\n        render = _ref2.render,\n        addEnterListener = _ref2.addEnterListener,\n        jumpTo = _ref2.jumpTo;\n    var sceneRendererProps = {\n      position: position,\n      layout: layout,\n      jumpTo: jumpTo\n    };\n    return React.createElement(React.Fragment, null, tabBarPosition === 'top' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n      navigationState: navigationState\n    })), render(navigationState.routes.map(function (route, i) {\n      return React.createElement(SceneView, _extends({}, sceneRendererProps, {\n        addEnterListener: addEnterListener,\n        key: route.key,\n        index: i,\n        lazy: typeof lazy === 'function' ? lazy({\n          route: route\n        }) : lazy,\n        lazyPreloadDistance: lazyPreloadDistance,\n        navigationState: navigationState,\n        style: sceneContainerStyle\n      }), function (_ref3) {\n        var loading = _ref3.loading;\n        return loading ? renderLazyPlaceholder({\n          route: route\n        }) : renderScene(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n          route: route\n        }));\n      });\n    })), tabBarPosition === 'bottom' && renderTabBar(_objectSpread(_objectSpread({}, sceneRendererProps), {}, {\n      navigationState: navigationState\n    })));\n  }));\n}\nvar styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Pager","SceneView","TabBar","TabView","onIndexChange","navigationState","renderScene","initialLayout","keyboardDismissMode","lazy","lazyPreloadDistance","onSwipeStart","onSwipeEnd","renderLazyPlaceholder","renderTabBar","props","sceneContainerStyle","pagerStyle","style","swipeEnabled","tabBarPosition","animationEnabled","useState","width","height","layout","setLayout","jumpToIndex","index","handleLayout","e","nativeEvent","prevLayout","View","onLayout","styles","pager","position","render","addEnterListener","jumpTo","sceneRendererProps","Fragment","routes","map","route","i","key","loading","StyleSheet","create","flex","overflow"],"sources":["TabView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Pager from './Pager';\nimport SceneView from './SceneView';\nimport TabBar from './TabBar';\nimport type {\n  Layout,\n  NavigationState,\n  PagerProps,\n  Route,\n  SceneRendererProps,\n} from './types';\n\nexport type Props<T extends Route> = PagerProps & {\n  onIndexChange: (index: number) => void;\n  navigationState: NavigationState<T>;\n  renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;\n  renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;\n  renderTabBar?: (\n    props: SceneRendererProps & { navigationState: NavigationState<T> }\n  ) => React.ReactNode;\n  tabBarPosition?: 'top' | 'bottom';\n  initialLayout?: Partial<Layout>;\n  lazy?: ((props: { route: T }) => boolean) | boolean;\n  lazyPreloadDistance?: number;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  pagerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function TabView<T extends Route>({\n  onIndexChange,\n  navigationState,\n  renderScene,\n  initialLayout,\n  keyboardDismissMode = 'auto',\n  lazy = false,\n  lazyPreloadDistance = 0,\n  onSwipeStart,\n  onSwipeEnd,\n  renderLazyPlaceholder = () => null,\n  renderTabBar = (props) => <TabBar {...props} />,\n  sceneContainerStyle,\n  pagerStyle,\n  style,\n  swipeEnabled = true,\n  tabBarPosition = 'top',\n  animationEnabled = true,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState({\n    width: 0,\n    height: 0,\n    ...initialLayout,\n  });\n\n  const jumpToIndex = (index: number) => {\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((prevLayout) => {\n      if (prevLayout.width === width && prevLayout.height === height) {\n        return prevLayout;\n      }\n\n      return { height, width };\n    });\n  };\n\n  return (\n    <View onLayout={handleLayout} style={[styles.pager, style]}>\n      <Pager\n        layout={layout}\n        navigationState={navigationState}\n        keyboardDismissMode={keyboardDismissMode}\n        swipeEnabled={swipeEnabled}\n        onSwipeStart={onSwipeStart}\n        onSwipeEnd={onSwipeEnd}\n        onIndexChange={jumpToIndex}\n        animationEnabled={animationEnabled}\n        style={pagerStyle}\n      >\n        {({ position, render, addEnterListener, jumpTo }) => {\n          // All of the props here must not change between re-renders\n          // This is crucial to optimizing the routes with PureComponent\n          const sceneRendererProps = {\n            position,\n            layout,\n            jumpTo,\n          };\n\n          return (\n            <React.Fragment>\n              {tabBarPosition === 'top' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n              {render(\n                navigationState.routes.map((route, i) => {\n                  return (\n                    <SceneView\n                      {...sceneRendererProps}\n                      addEnterListener={addEnterListener}\n                      key={route.key}\n                      index={i}\n                      lazy={typeof lazy === 'function' ? lazy({ route }) : lazy}\n                      lazyPreloadDistance={lazyPreloadDistance}\n                      navigationState={navigationState}\n                      style={sceneContainerStyle}\n                    >\n                      {({ loading }) =>\n                        loading\n                          ? renderLazyPlaceholder({ route })\n                          : renderScene({\n                              ...sceneRendererProps,\n                              route,\n                            })\n                      }\n                    </SceneView>\n                  );\n                })\n              )}\n              {tabBarPosition === 'bottom' &&\n                renderTabBar({\n                  ...sceneRendererProps,\n                  navigationState,\n                })}\n            </React.Fragment>\n          );\n        }}\n      </Pager>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pager: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}