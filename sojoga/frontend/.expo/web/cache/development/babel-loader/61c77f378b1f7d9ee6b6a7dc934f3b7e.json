{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"mask\", \"type\", \"options\", \"textBold\", \"textItalic\", \"textDecoration\", \"style\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { mask } from \"../utils/mask\";\nexport function MaskedText(_ref) {\n  var text = _ref.children,\n    _ref$mask = _ref.mask,\n    pattern = _ref$mask === void 0 ? '' : _ref$mask,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'custom' : _ref$type,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    textBold = _ref.textBold,\n    textItalic = _ref.textItalic,\n    textDecoration = _ref.textDecoration,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var styleSheet = _objectSpread(_objectSpread({}, typeof style === 'object' ? style : {}), {}, {\n    fontWeight: textBold ? 'bold' : 'normal',\n    fontStyle: textItalic ? 'italic' : 'normal',\n    textDecorationLine: textDecoration ? textDecoration : 'none'\n  });\n  return React.createElement(Text, _extends({}, rest, {\n    style: _objectSpread({}, styleSheet)\n  }), mask(text, pattern, type, options));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,SAASC,IAAI;AAab,OAAO,SAASC,UAAU,OAUmB;EAAA,IATjCC,IAAI,GAScC,KAT5BC,QAAQ;IAAA,YASoBD,KAR5BH,IAAI;IAAEK,OAAO,0BAAG,EAAE;IAAA,YAQUF,KAP5BG,IAAI;IAAJA,IAAI,0BAAG,QAAQ;IAAA,eAOaH,KAN5BI,OAAO;IAAPA,OAAO,6BAAG,CAAC,CAAgB;IAC3BC,QAAQ,GAKoBL,KAL5BK,QAAQ;IACRC,UAAU,GAIkBN,KAJ5BM,UAAU;IACVC,cAAc,GAGcP,KAH5BO,cAAc;IACdC,KAAK,GAEuBR,KAF5BQ,KAAK;IACFC,gCACyBT;EAC5B,IAAMU,UAAU,mCACV,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,CAAC,CAAC;IAC1CG,UAAU,EAACN,QAAQ,GAAG,MAAM,GAAG,QAAQ;IACvCO,SAAS,EAAEN,UAAU,GAAG,QAAQ,GAAG,QAAQ;IAC3CO,kBAAkB,EAAEN,cAAc,GAAGA,cAAc,GAAG;EAAA,EACvD;EACD,OAAOX,oBAACkB,IAAI,eAAKL,IAAI;IAAED,KAAK,oBAAME;EAAwB,IAAEb,IAAI,CAACE,IAAI,EAAEG,OAAO,EAAEC,IAAI,EAAEC,OAAO,CAAC,CAAQ;AACxG","names":["React","mask","MaskedText","text","_ref","children","pattern","type","options","textBold","textItalic","textDecoration","style","rest","styleSheet","fontWeight","fontStyle","textDecorationLine","Text"],"sources":["MaskedText.tsx"],"sourcesContent":["import React from 'react'\nimport { Text, TextProps } from 'react-native'\nimport { mask } from '../utils/mask'\nimport type { MaskOptions, StyleObj, TextDecorationOptions } from 'src/@types'\nexport interface MaskedTextProps {\n  children: string\n  mask?: string\n  type?: 'custom' | 'currency'\n  options?: MaskOptions\n  textBold?: boolean\n  textItalic?:boolean\n  textDecoration?:TextDecorationOptions\n  style?:StyleObj\n}\n\nexport function MaskedText({\n  children: text,\n  mask: pattern = '',\n  type = 'custom',\n  options = {} as MaskOptions,\n  textBold,\n  textItalic,\n  textDecoration,\n  style,\n  ...rest\n}: MaskedTextProps & TextProps): JSX.Element {\n  const styleSheet = {\n    ...(typeof style === 'object' ? style : {}),\n    fontWeight:textBold ? 'bold' : 'normal',\n    fontStyle: textItalic ? 'italic' : 'normal',\n    textDecorationLine: textDecoration ? textDecoration : 'none'\n  }\n  return <Text {...rest} style={{...styleSheet} as StyleObj}>{mask(text, pattern, type, options)}</Text>;\n}\n"]},"metadata":{},"sourceType":"module"}