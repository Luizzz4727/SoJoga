{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as THEME from \"./Theme\";\nvar TableHead = function TableHead(_ref) {\n  var _ref$titleTextStyle = _ref.titleTextStyle,\n    titleTextStyle = _ref$titleTextStyle === void 0 ? {} : _ref$titleTextStyle,\n    _ref$itemStyle = _ref.itemStyle,\n    itemStyle = _ref$itemStyle === void 0 ? {} : _ref$itemStyle,\n    _ref$dataTitleHead = _ref.dataTitleHead,\n    dataTitleHead = _ref$dataTitleHead === void 0 ? [] : _ref$dataTitleHead,\n    _ref$dataSpacing = _ref.dataSpacing,\n    dataSpacing = _ref$dataSpacing === void 0 ? [] : _ref$dataSpacing;\n  return React.createElement(View, {\n    style: _objectSpread({}, styles.container)\n  }, (dataSpacing === null || dataSpacing === void 0 ? void 0 : dataSpacing.length) != 0 && dataSpacing.map(function (itemWidth, idx) {\n    return React.createElement(View, {\n      key: idx,\n      style: _objectSpread({\n        width: itemWidth\n      }, itemStyle)\n    }, React.createElement(Text, {\n      style: _objectSpread({\n        color: THEME.WHITE_COLOR\n      }, titleTextStyle)\n    }, dataTitleHead[idx] ? dataTitleHead[idx] : ''));\n  }));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row'\n  }\n});\nexport default TableHead;","map":{"version":3,"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAAA;AASA,OAAO,KAAKC,KAAZ;AASA,IAAMC,SAAuC,GAAG,SAA1CA,SAAuC,CAAGC,MAMtB;EAAA,+BALxBC,cAAc;IAAdA,cAAc,oCAAG,EAD8B;IAAA,iBAMvBD,KAJxBE,SAAS;IAATA,SAAS,+BAAG,EAFmC;IAAA,qBAMvBF,KAHxBG,aAAa;IAAbA,aAAa,mCAAG,EAH+B;IAAA,mBAMvBH,KAFxBI,WAAW;IAAXA,WAAW,iCAAG;EAId,OACEP,oBAACQ,IAAD;IAAMC,KAAK,oBAAMC,MAAM,CAACC;EAAxB,GAEI,YAAW,SAAX,eAAW,WAAX,uBAAW,CAAEC,MAAb,KAAuB,CAAvB,IAA4BL,WAAW,CAACM,GAAZ,CAAgB,UAACC,SAAD,EAAYC,GAAZ,EAAoB;IAC9D,OACIf,oBAACQ,IAAD;MACEQ,GAAG,EAAED,GADP;MAEEN,KAAK;QACHQ,KAAK,EAAEH;MADF,GAEDT;IAJR,GAOEL,oBAACkB,IAAD;MACET,KAAK;QACHU,KAAK,EAAElB,KAAK,CAACmB;MADR,GAEDhB;IAHR,GAOIE,aAAa,CAACS,GAAD,CAAb,GAAqBT,aAAa,CAACS,GAAD,CAAlC,GAA0C,EAP9C,CAPF,CADJ;EAoBD,CArB2B,CAFhC,CADF;AA4BD,CApCD;AAsCA,IAAML,MAAM,GAAGW,UAAU,CAACC,MAAX,CAAkB;EAC/BX,SAAS,EAAE;IACTY,aAAa,EAAE;EADN;AADoB,CAAlB,CAAf;AAMA,eAAerB,SAAf","names":["React","THEME","TableHead","_ref","titleTextStyle","itemStyle","dataTitleHead","dataSpacing","View","style","styles","container","length","map","itemWidth","idx","key","width","Text","color","WHITE_COLOR","StyleSheet","create","flexDirection"],"sources":["TableHead.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  StyleProp,\n  ViewStyle,\n  TextStyle\n} from 'react-native';\nimport * as THEME from './Theme';\n\nexport interface TableHeadInterface {\n  titleTextStyle?: StyleProp<TextStyle>;\n  itemStyle?: StyleProp<ViewStyle>;\n  dataTitleHead?: Array<string>;\n  dataSpacing?: Array<string>;\n}\n\nconst TableHead: React.FC<TableHeadInterface> = ({\n  titleTextStyle = {},\n  itemStyle = {},\n  dataTitleHead = [],\n  dataSpacing = [],\n  \n}: TableHeadInterface) => {\n\n  return (\n    <View style={{...styles.container}}>\n      {\n        dataSpacing?.length != 0 && dataSpacing.map((itemWidth, idx) => {\n          return (\n              <View\n                key={idx}\n                style={{\n                  width: itemWidth,\n                  ...(itemStyle as object),\n                }}\n              >\n                <Text\n                  style={{\n                    color: THEME.WHITE_COLOR,\n                    ...(titleTextStyle as object),\n                  }}\n                >\n                  {\n                    dataTitleHead[idx] ? dataTitleHead[idx] : ''\n                  }\n                </Text>\n              </View>\n          )\n        })\n      }\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n  },\n});\n\nexport default TableHead;"]},"metadata":{},"sourceType":"module"}