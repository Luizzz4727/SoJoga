{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport TabBarIndicator from \"./TabBarIndicator\";\nimport TabBarItem from \"./TabBarItem\";\nimport useAnimatedValue from \"./useAnimatedValue\";\n\nvar Separator = function Separator(_ref) {\n  var width = _ref.width;\n  return React.createElement(View, {\n    style: {\n      width: width\n    }\n  });\n};\n\nvar getFlattenedTabWidth = function getFlattenedTabWidth(style) {\n  var tabStyle = StyleSheet.flatten(style);\n  return tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width;\n};\n\nvar getComputedTabWidth = function getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        var width = parseFloat(flattenedWidth);\n\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n\n  }\n\n  if (scrollEnabled) {\n    return layout.width / 5 * 2;\n  }\n\n  return layout.width / routes.length;\n};\n\nvar getMaxScrollDistance = function getMaxScrollDistance(tabBarWidth, layoutWidth) {\n  return tabBarWidth - layoutWidth;\n};\n\nvar getTranslateX = function getTranslateX(scrollAmount, maxScrollDistance) {\n  return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1)) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n};\n\nvar getTabBarWidth = function getTabBarWidth(_ref2) {\n  var navigationState = _ref2.navigationState,\n      layout = _ref2.layout,\n      gap = _ref2.gap,\n      scrollEnabled = _ref2.scrollEnabled,\n      flattenedTabWidth = _ref2.flattenedTabWidth,\n      tabWidths = _ref2.tabWidths;\n  var routes = navigationState.routes;\n  return routes.reduce(function (acc, _, i) {\n    return acc + (i > 0 ? gap !== null && gap !== void 0 ? gap : 0 : 0) + getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n  }, 0);\n};\n\nvar normalizeScrollValue = function normalizeScrollValue(_ref3) {\n  var layout = _ref3.layout,\n      navigationState = _ref3.navigationState,\n      gap = _ref3.gap,\n      scrollEnabled = _ref3.scrollEnabled,\n      tabWidths = _ref3.tabWidths,\n      value = _ref3.value,\n      flattenedTabWidth = _ref3.flattenedTabWidth;\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nvar getScrollAmount = function getScrollAmount(_ref4) {\n  var layout = _ref4.layout,\n      navigationState = _ref4.navigationState,\n      gap = _ref4.gap,\n      scrollEnabled = _ref4.scrollEnabled,\n      flattenedTabWidth = _ref4.flattenedTabWidth,\n      tabWidths = _ref4.tabWidths;\n  var centerDistance = Array.from({\n    length: navigationState.index + 1\n  }).reduce(function (total, _, i) {\n    var tabWidth = getComputedTabWidth(i, layout, navigationState.routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    return total + (navigationState.index === i ? (tabWidth + (gap !== null && gap !== void 0 ? gap : 0)) / 2 : tabWidth + (gap !== null && gap !== void 0 ? gap : 0));\n  }, 0);\n  var scrollAmount = centerDistance - layout.width / 2;\n  return normalizeScrollValue({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    value: scrollAmount,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n};\n\nvar getLabelTextDefault = function getLabelTextDefault(_ref5) {\n  var route = _ref5.route;\n  return route.title;\n};\n\nvar getAccessibleDefault = function getAccessibleDefault(_ref6) {\n  var route = _ref6.route;\n  return typeof route.accessible !== 'undefined' ? route.accessible : true;\n};\n\nvar getAccessibilityLabelDefault = function getAccessibilityLabelDefault(_ref7) {\n  var route = _ref7.route;\n  return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n};\n\nvar renderIndicatorDefault = function renderIndicatorDefault(props) {\n  return React.createElement(TabBarIndicator, props);\n};\n\nvar getTestIdDefault = function getTestIdDefault(_ref8) {\n  var route = _ref8.route;\n  return route.testID;\n};\n\nvar MEASURE_PER_BATCH = 10;\nexport default function TabBar(_ref9) {\n  var _ref9$getLabelText = _ref9.getLabelText,\n      getLabelText = _ref9$getLabelText === void 0 ? getLabelTextDefault : _ref9$getLabelText,\n      _ref9$getAccessible = _ref9.getAccessible,\n      getAccessible = _ref9$getAccessible === void 0 ? getAccessibleDefault : _ref9$getAccessible,\n      _ref9$getAccessibilit = _ref9.getAccessibilityLabel,\n      getAccessibilityLabel = _ref9$getAccessibilit === void 0 ? getAccessibilityLabelDefault : _ref9$getAccessibilit,\n      _ref9$getTestID = _ref9.getTestID,\n      getTestID = _ref9$getTestID === void 0 ? getTestIdDefault : _ref9$getTestID,\n      _ref9$renderIndicator = _ref9.renderIndicator,\n      renderIndicator = _ref9$renderIndicator === void 0 ? renderIndicatorDefault : _ref9$renderIndicator,\n      _ref9$gap = _ref9.gap,\n      gap = _ref9$gap === void 0 ? 0 : _ref9$gap,\n      scrollEnabled = _ref9.scrollEnabled,\n      jumpTo = _ref9.jumpTo,\n      navigationState = _ref9.navigationState,\n      position = _ref9.position,\n      activeColor = _ref9.activeColor,\n      bounces = _ref9.bounces,\n      contentContainerStyle = _ref9.contentContainerStyle,\n      inactiveColor = _ref9.inactiveColor,\n      indicatorContainerStyle = _ref9.indicatorContainerStyle,\n      indicatorStyle = _ref9.indicatorStyle,\n      labelStyle = _ref9.labelStyle,\n      onTabLongPress = _ref9.onTabLongPress,\n      onTabPress = _ref9.onTabPress,\n      pressColor = _ref9.pressColor,\n      pressOpacity = _ref9.pressOpacity,\n      renderBadge = _ref9.renderBadge,\n      renderIcon = _ref9.renderIcon,\n      renderLabel = _ref9.renderLabel,\n      renderTabBarItem = _ref9.renderTabBarItem,\n      style = _ref9.style,\n      tabStyle = _ref9.tabStyle,\n      testID = _ref9.testID;\n\n  var _React$useState = React.useState({\n    width: 0,\n    height: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      layout = _React$useState2[0],\n      setLayout = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      tabWidths = _React$useState4[0],\n      setTabWidths = _React$useState4[1];\n\n  var flatListRef = React.useRef(null);\n  var isFirst = React.useRef(true);\n  var scrollAmount = useAnimatedValue(0);\n  var measuredTabWidths = React.useRef({});\n  var routes = navigationState.routes;\n  var flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  var isWidthDynamic = flattenedTabWidth === 'auto';\n  var scrollOffset = getScrollAmount({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var hasMeasuredTabWidths = Boolean(layout.width) && routes.slice(0, navigationState.index).every(function (r) {\n    return typeof tabWidths[r.key] === 'number';\n  });\n  React.useEffect(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n\n    if (scrollEnabled) {\n      var _flatListRef$current;\n\n      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToOffset({\n        offset: scrollOffset,\n        animated: true\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      return layout.width === width && layout.height === height ? layout : {\n        width: width,\n        height: height\n      };\n    });\n  };\n\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  var separatorPercent = separatorsWidth / tabBarWidth * 100;\n  var tabBarWidthPercent = routes.length * 40 + \"%\";\n  var translateX = React.useMemo(function () {\n    return getTranslateX(scrollAmount, getMaxScrollDistance(tabBarWidth, layout.width));\n  }, [layout.width, scrollAmount, tabBarWidth]);\n  var renderItem = React.useCallback(function (_ref10) {\n    var route = _ref10.item,\n        index = _ref10.index;\n    var props = {\n      key: route.key,\n      position: position,\n      route: route,\n      navigationState: navigationState,\n      getAccessibilityLabel: getAccessibilityLabel,\n      getAccessible: getAccessible,\n      getLabelText: getLabelText,\n      getTestID: getTestID,\n      renderBadge: renderBadge,\n      renderIcon: renderIcon,\n      renderLabel: renderLabel,\n      activeColor: activeColor,\n      inactiveColor: inactiveColor,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      onLayout: isWidthDynamic ? function (e) {\n        measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n        if (routes.length > MEASURE_PER_BATCH && index === MEASURE_PER_BATCH && routes.slice(0, MEASURE_PER_BATCH).every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        } else if (routes.every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        }\n      } : undefined,\n      onPress: function onPress() {\n        var event = {\n          route: route,\n          defaultPrevented: false,\n          preventDefault: function preventDefault() {\n            event.defaultPrevented = true;\n          }\n        };\n        onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n        if (event.defaultPrevented) {\n          return;\n        }\n\n        jumpTo(route.key);\n      },\n      onLongPress: function onLongPress() {\n        return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n          route: route\n        });\n      },\n      labelStyle: labelStyle,\n      style: tabStyle,\n      defaultTabWidth: !isWidthDynamic ? getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, getFlattenedTabWidth(tabStyle)) : undefined\n    };\n    return React.createElement(React.Fragment, null, gap > 0 && index > 0 ? React.createElement(Separator, {\n      width: gap\n    }) : null, renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props));\n  }, [activeColor, gap, getAccessibilityLabel, getAccessible, getLabelText, getTestID, inactiveColor, isWidthDynamic, jumpTo, labelStyle, layout, navigationState, onTabLongPress, onTabPress, position, pressColor, pressOpacity, renderBadge, renderIcon, renderLabel, renderTabBarItem, routes, scrollEnabled, tabStyle, tabWidths]);\n  var keyExtractor = React.useCallback(function (item) {\n    return item.key;\n  }, []);\n  var contentContainerStyleMemoized = React.useMemo(function () {\n    return [styles.tabContent, scrollEnabled ? {\n      width: tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent\n    } : styles.container, contentContainerStyle];\n  }, [contentContainerStyle, scrollEnabled, separatorsWidth, tabBarWidth, tabBarWidthPercent]);\n  var handleScroll = React.useMemo(function () {\n    return Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: scrollAmount\n        }\n      }\n    }], {\n      useNativeDriver: true\n    });\n  }, [scrollAmount]);\n  var handleViewableItemsChanged = useLatestCallback(function (_ref11) {\n    var changed = _ref11.changed;\n\n    if (routes.length <= MEASURE_PER_BATCH) {\n      return;\n    }\n\n    var item = changed[changed.length - 1];\n    var index = (item === null || item === void 0 ? void 0 : item.index) || 0;\n\n    if (item.isViewable && (index % 10 === 0 || index === navigationState.index || index === routes.length - 1)) {\n      setTabWidths(_objectSpread({}, measuredTabWidths.current));\n    }\n  });\n  return React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [styles.tabBar, style]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.indicatorContainer, scrollEnabled ? {\n      transform: [{\n        translateX: translateX\n      }]\n    } : null, tabBarWidth > separatorsWidth ? {\n      width: tabBarWidth - separatorsWidth\n    } : scrollEnabled ? {\n      width: tabBarWidthPercent\n    } : null, indicatorContainerStyle]\n  }, renderIndicator({\n    position: position,\n    layout: layout,\n    navigationState: navigationState,\n    jumpTo: jumpTo,\n    width: isWidthDynamic ? 'auto' : (100 - separatorPercent) / routes.length + \"%\",\n    style: indicatorStyle,\n    getTabWidth: function getTabWidth(i) {\n      return getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    },\n    gap: gap\n  })), React.createElement(View, {\n    style: styles.scroll\n  }, React.createElement(Animated.FlatList, {\n    data: routes,\n    keyExtractor: keyExtractor,\n    horizontal: true,\n    accessibilityRole: \"tablist\",\n    keyboardShouldPersistTaps: \"handled\",\n    scrollEnabled: scrollEnabled,\n    bounces: bounces,\n    initialNumToRender: MEASURE_PER_BATCH,\n    onViewableItemsChanged: handleViewableItemsChanged,\n    alwaysBounceHorizontal: false,\n    scrollsToTop: false,\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    automaticallyAdjustContentInsets: false,\n    overScrollMode: \"never\",\n    contentContainerStyle: contentContainerStyleMemoized,\n    scrollEventThrottle: 16,\n    renderItem: renderItem,\n    onScroll: handleScroll,\n    ref: flatListRef,\n    testID: testID\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useLatestCallback","TabBarIndicator","TabBarItem","useAnimatedValue","Separator","width","View","style","getFlattenedTabWidth","tabStyle","StyleSheet","flatten","getComputedTabWidth","index","layout","routes","scrollEnabled","tabWidths","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","getMaxScrollDistance","tabBarWidth","layoutWidth","getTranslateX","scrollAmount","maxScrollDistance","Animated","multiply","Platform","OS","I18nManager","isRTL","add","getTabBarWidth","navigationState","gap","flattenedTabWidth","reduce","acc","_","i","normalizeScrollValue","value","maxDistance","scrollValue","Math","max","min","getScrollAmount","centerDistance","Array","from","total","tabWidth","getLabelTextDefault","route","title","getAccessibleDefault","accessible","getAccessibilityLabelDefault","accessibilityLabel","undefined","renderIndicatorDefault","props","getTestIdDefault","testID","MEASURE_PER_BATCH","TabBar","getLabelText","getAccessible","getAccessibilityLabel","getTestID","renderIndicator","jumpTo","position","activeColor","bounces","contentContainerStyle","inactiveColor","indicatorContainerStyle","indicatorStyle","labelStyle","onTabLongPress","onTabPress","pressColor","pressOpacity","renderBadge","renderIcon","renderLabel","renderTabBarItem","useState","height","setLayout","setTabWidths","flatListRef","useRef","isFirst","measuredTabWidths","isWidthDynamic","scrollOffset","hasMeasuredTabWidths","Boolean","slice","every","r","useEffect","current","scrollToOffset","offset","animated","handleLayout","e","nativeEvent","separatorsWidth","separatorPercent","tabBarWidthPercent","translateX","useMemo","renderItem","useCallback","item","onLayout","onPress","event","defaultPrevented","preventDefault","onLongPress","defaultTabWidth","keyExtractor","contentContainerStyleMemoized","styles","tabContent","container","handleScroll","contentOffset","x","useNativeDriver","handleViewableItemsChanged","changed","isViewable","tabBar","pointerEvents","indicatorContainer","transform","getTabWidth","scroll","FlatList","data","horizontal","accessibilityRole","keyboardShouldPersistTaps","initialNumToRender","onViewableItemsChanged","alwaysBounceHorizontal","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","automaticallyAdjustContentInsets","overScrollMode","scrollEventThrottle","onScroll","ref","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"sources":["TabBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  FlatList,\n  I18nManager,\n  LayoutChangeEvent,\n  ListRenderItemInfo,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n  ViewToken,\n} from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\n\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport type {\n  Event,\n  Layout,\n  NavigationState,\n  Route,\n  Scene,\n  SceneRendererProps,\n} from './types';\nimport useAnimatedValue from './useAnimatedValue';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText?: (scene: Scene<T>) => string | undefined;\n  getAccessible?: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel?: (scene: Scene<T>) => string | undefined;\n  getTestID?: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator?: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gap?: number;\n  testID?: string;\n};\n\ntype FlattenedTabWidth = string | number | undefined;\n\nconst Separator = ({ width }: { width: number }) => {\n  return <View style={{ width }} />;\n};\n\nconst getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n  const tabStyle = StyleSheet.flatten(style);\n\n  return tabStyle?.width;\n};\n\nconst getComputedTabWidth = (\n  index: number,\n  layout: Layout,\n  routes: Route[],\n  scrollEnabled: boolean | undefined,\n  tabWidths: { [key: string]: number },\n  flattenedWidth: FlattenedTabWidth\n) => {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        const width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n\n  if (scrollEnabled) {\n    return (layout.width / 5) * 2;\n  }\n  return layout.width / routes.length;\n};\n\nconst getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n  tabBarWidth - layoutWidth;\n\nconst getTranslateX = (\n  scrollAmount: Animated.Value,\n  maxScrollDistance: number\n) =>\n  Animated.multiply(\n    Platform.OS === 'android' && I18nManager.isRTL\n      ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n      : scrollAmount,\n    I18nManager.isRTL ? 1 : -1\n  );\n\nconst getTabBarWidth = <T extends Route>({\n  navigationState,\n  layout,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'navigationState' | 'gap' | 'layout' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const { routes } = navigationState;\n\n  return routes.reduce<number>(\n    (acc, _, i) =>\n      acc +\n      (i > 0 ? gap ?? 0 : 0) +\n      getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedTabWidth\n      ),\n    0\n  );\n};\n\nconst normalizeScrollValue = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  tabWidths,\n  value,\n  flattenedTabWidth,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'gap' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  value: number;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n  const maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    // On Android, scroll value is not applied in reverse in RTL\n    // so we need to manually adjust it to apply correct value\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nconst getScrollAmount = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'scrollEnabled' | 'gap'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const centerDistance = Array.from({\n    length: navigationState.index + 1,\n  }).reduce<number>((total, _, i) => {\n    const tabWidth = getComputedTabWidth(\n      i,\n      layout,\n      navigationState.routes,\n      scrollEnabled,\n      tabWidths,\n      flattenedTabWidth\n    );\n\n    // To get the current index centered we adjust scroll amount by width of indexes\n    // 0 through (i - 1) and add half the width of current index i\n    return (\n      total +\n      (navigationState.index === i\n        ? (tabWidth + (gap ?? 0)) / 2\n        : tabWidth + (gap ?? 0))\n    );\n  }, 0);\n\n  const scrollAmount = centerDistance - layout.width / 2;\n\n  return normalizeScrollValue({\n    layout,\n    navigationState,\n    tabWidths,\n    value: scrollAmount,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n};\n\nconst getLabelTextDefault = ({ route }: Scene<Route>) => route.title;\n\nconst getAccessibleDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessible !== 'undefined' ? route.accessible : true;\n\nconst getAccessibilityLabelDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessibilityLabel === 'string'\n    ? route.accessibilityLabel\n    : typeof route.title === 'string'\n    ? route.title\n    : undefined;\n\nconst renderIndicatorDefault = (props: IndicatorProps<Route>) => (\n  <TabBarIndicator {...props} />\n);\n\nconst getTestIdDefault = ({ route }: Scene<Route>) => route.testID;\n\n// How many items measurements should we update per batch.\n// Defaults to 10, since that's whats FlatList is using in initialNumToRender.\nconst MEASURE_PER_BATCH = 10;\n\nexport default function TabBar<T extends Route>({\n  getLabelText = getLabelTextDefault,\n  getAccessible = getAccessibleDefault,\n  getAccessibilityLabel = getAccessibilityLabelDefault,\n  getTestID = getTestIdDefault,\n  renderIndicator = renderIndicatorDefault,\n  gap = 0,\n  scrollEnabled,\n  jumpTo,\n  navigationState,\n  position,\n  activeColor,\n  bounces,\n  contentContainerStyle,\n  inactiveColor,\n  indicatorContainerStyle,\n  indicatorStyle,\n  labelStyle,\n  onTabLongPress,\n  onTabPress,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  renderLabel,\n  renderTabBarItem,\n  style,\n  tabStyle,\n  testID,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState<Layout>({ width: 0, height: 0 });\n  const [tabWidths, setTabWidths] = React.useState<Record<string, number>>({});\n  const flatListRef = React.useRef<FlatList | null>(null);\n  const isFirst = React.useRef(true);\n  const scrollAmount = useAnimatedValue(0);\n  const measuredTabWidths = React.useRef<Record<string, number>>({});\n\n  const { routes } = navigationState;\n  const flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  const isWidthDynamic = flattenedTabWidth === 'auto';\n  const scrollOffset = getScrollAmount({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const hasMeasuredTabWidths =\n    Boolean(layout.width) &&\n    routes\n      .slice(0, navigationState.index)\n      .every((r) => typeof tabWidths[r.key] === 'number');\n\n  React.useEffect(() => {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n\n    if (scrollEnabled) {\n      flatListRef.current?.scrollToOffset({\n        offset: scrollOffset,\n        animated: true,\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) =>\n      layout.width === width && layout.height === height\n        ? layout\n        : { width, height }\n    );\n  };\n\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  const separatorPercent = (separatorsWidth / tabBarWidth) * 100;\n  const tabBarWidthPercent = `${routes.length * 40}%`;\n\n  const translateX = React.useMemo(\n    () =>\n      getTranslateX(\n        scrollAmount,\n        getMaxScrollDistance(tabBarWidth, layout.width)\n      ),\n    [layout.width, scrollAmount, tabBarWidth]\n  );\n\n  const renderItem = React.useCallback(\n    ({ item: route, index }: ListRenderItemInfo<T>) => {\n      const props: TabBarItemProps<T> & { key: string } = {\n        key: route.key,\n        position: position,\n        route: route,\n        navigationState: navigationState,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessible: getAccessible,\n        getLabelText: getLabelText,\n        getTestID: getTestID,\n        renderBadge: renderBadge,\n        renderIcon: renderIcon,\n        renderLabel: renderLabel,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor,\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        onLayout: isWidthDynamic\n          ? (e: LayoutChangeEvent) => {\n              measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n              // When we have measured widths for all of the tabs, we should updates the state\n              // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n              // If we have more than 10 routes divide updating tabWidths into multiple batches. Here we update only first batch of 10 items.\n              if (\n                routes.length > MEASURE_PER_BATCH &&\n                index === MEASURE_PER_BATCH &&\n                routes\n                  .slice(0, MEASURE_PER_BATCH)\n                  .every(\n                    (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                  )\n              ) {\n                setTabWidths({ ...measuredTabWidths.current });\n              } else if (\n                routes.every(\n                  (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                )\n              ) {\n                // When we have measured widths for all of the tabs, we should updates the state\n                // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                setTabWidths({ ...measuredTabWidths.current });\n              }\n            }\n          : undefined,\n        onPress: () => {\n          const event: Scene<T> & Event = {\n            route,\n            defaultPrevented: false,\n            preventDefault: () => {\n              event.defaultPrevented = true;\n            },\n          };\n\n          onTabPress?.(event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          jumpTo(route.key);\n        },\n        onLongPress: () => onTabLongPress?.({ route }),\n        labelStyle: labelStyle,\n        style: tabStyle,\n        // Calculate the deafult width for tab for FlatList to work\n        defaultTabWidth: !isWidthDynamic\n          ? getComputedTabWidth(\n              index,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              getFlattenedTabWidth(tabStyle)\n            )\n          : undefined,\n      };\n\n      return (\n        <>\n          {gap > 0 && index > 0 ? <Separator width={gap} /> : null}\n          {renderTabBarItem ? (\n            renderTabBarItem(props)\n          ) : (\n            <TabBarItem {...props} />\n          )}\n        </>\n      );\n    },\n    [\n      activeColor,\n      gap,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      inactiveColor,\n      isWidthDynamic,\n      jumpTo,\n      labelStyle,\n      layout,\n      navigationState,\n      onTabLongPress,\n      onTabPress,\n      position,\n      pressColor,\n      pressOpacity,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      routes,\n      scrollEnabled,\n      tabStyle,\n      tabWidths,\n    ]\n  );\n\n  const keyExtractor = React.useCallback((item: T) => item.key, []);\n\n  const contentContainerStyleMemoized = React.useMemo(\n    () => [\n      styles.tabContent,\n      scrollEnabled\n        ? {\n            width:\n              tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent,\n          }\n        : styles.container,\n      contentContainerStyle,\n    ],\n    [\n      contentContainerStyle,\n      scrollEnabled,\n      separatorsWidth,\n      tabBarWidth,\n      tabBarWidthPercent,\n    ]\n  );\n\n  const handleScroll = React.useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              contentOffset: { x: scrollAmount },\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    [scrollAmount]\n  );\n\n  const handleViewableItemsChanged = useLatestCallback(\n    ({ changed }: { changed: ViewToken[] }) => {\n      if (routes.length <= MEASURE_PER_BATCH) {\n        return;\n      }\n      // Get next vievable item\n      const item = changed[changed.length - 1];\n      const index = item?.index || 0;\n      if (\n        item.isViewable &&\n        (index % 10 === 0 ||\n          index === navigationState.index ||\n          index === routes.length - 1)\n      ) {\n        setTabWidths({ ...measuredTabWidths.current });\n      }\n    }\n  );\n\n  return (\n    <Animated.View onLayout={handleLayout} style={[styles.tabBar, style]}>\n      <Animated.View\n        pointerEvents=\"none\"\n        style={[\n          styles.indicatorContainer,\n          scrollEnabled ? { transform: [{ translateX }] as any } : null,\n          tabBarWidth > separatorsWidth\n            ? { width: tabBarWidth - separatorsWidth }\n            : scrollEnabled\n            ? { width: tabBarWidthPercent }\n            : null,\n          indicatorContainerStyle,\n        ]}\n      >\n        {renderIndicator({\n          position,\n          layout,\n          navigationState,\n          jumpTo,\n          width: isWidthDynamic\n            ? 'auto'\n            : `${(100 - separatorPercent) / routes.length}%`,\n          style: indicatorStyle,\n          getTabWidth: (i: number) =>\n            getComputedTabWidth(\n              i,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              flattenedTabWidth\n            ),\n          gap,\n        })}\n      </Animated.View>\n      <View style={styles.scroll}>\n        <Animated.FlatList\n          data={routes as Animated.WithAnimatedValue<T>[]}\n          keyExtractor={keyExtractor}\n          horizontal\n          accessibilityRole=\"tablist\"\n          keyboardShouldPersistTaps=\"handled\"\n          scrollEnabled={scrollEnabled}\n          bounces={bounces}\n          initialNumToRender={MEASURE_PER_BATCH}\n          onViewableItemsChanged={handleViewableItemsChanged}\n          alwaysBounceHorizontal={false}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          automaticallyAdjustContentInsets={false}\n          overScrollMode=\"never\"\n          contentContainerStyle={contentContainerStyleMemoized}\n          scrollEventThrottle={16}\n          renderItem={renderItem}\n          onScroll={handleScroll}\n          ref={flatListRef}\n          testID={testID}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}