{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"mask\", \"type\", \"options\", \"defaultValue\", \"onChangeText\", \"value\", \"inputAccessoryView\", \"autoCapitalize\", \"textBold\", \"textItalic\", \"textDecoration\", \"style\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useEffect, useState, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { mask, unMask } from \"../utils/mask\";\nexport var MaskedTextInputComponent = function MaskedTextInputComponent(_ref, ref) {\n  var _ref$mask = _ref.mask,\n    pattern = _ref$mask === void 0 ? '' : _ref$mask,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'custom' : _ref$type,\n    _ref$options = _ref.options,\n    options = _ref$options === void 0 ? {} : _ref$options,\n    defaultValue = _ref.defaultValue,\n    onChangeText = _ref.onChangeText,\n    value = _ref.value,\n    inputAccessoryView = _ref.inputAccessoryView,\n    _ref$autoCapitalize = _ref.autoCapitalize,\n    autoCapitalize = _ref$autoCapitalize === void 0 ? 'sentences' : _ref$autoCapitalize,\n    textBold = _ref.textBold,\n    textItalic = _ref.textItalic,\n    textDecoration = _ref.textDecoration,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var styleSheet = _objectSpread(_objectSpread({}, typeof style === 'object' ? style : {}), {}, {\n    fontWeight: textBold && 'bold',\n    fontStyle: textItalic && 'italic',\n    textDecorationLine: textDecoration\n  });\n  var getMaskedValue = function getMaskedValue(value) {\n    return mask(value, pattern, type, options, autoCapitalize);\n  };\n  var getUnMaskedValue = function getUnMaskedValue(value) {\n    return unMask(value, type);\n  };\n  var defaultValueCustom = defaultValue || '';\n  var defaultValueCurrency = defaultValue || '0';\n  var initialRawValue = value;\n  var initialMaskedValue = getMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);\n  var initialUnMaskedValue = getUnMaskedValue(type === 'currency' ? defaultValueCurrency : defaultValueCustom);\n  var _useState = useState(initialMaskedValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    maskedValue = _useState2[0],\n    setMaskedValue = _useState2[1];\n  var _useState3 = useState(initialUnMaskedValue),\n    _useState4 = _slicedToArray(_useState3, 2),\n    unMaskedValue = _useState4[0],\n    setUnmaskedValue = _useState4[1];\n  var _useState5 = useState(initialRawValue),\n    _useState6 = _slicedToArray(_useState5, 2),\n    rawValue = _useState6[0],\n    setRawValue = _useState6[1];\n  var actualValue = pattern || type === \"currency\" ? maskedValue : rawValue;\n  function onChange(value) {\n    var newUnMaskedValue = unMask(value, type);\n    var newMaskedValue = mask(newUnMaskedValue, pattern, type, options);\n    setMaskedValue(newMaskedValue);\n    setUnmaskedValue(newUnMaskedValue);\n    setRawValue(value);\n  }\n  useEffect(function () {\n    onChangeText(maskedValue, unMaskedValue);\n  }, [maskedValue, unMaskedValue]);\n  useEffect(function () {\n    if (value) {\n      setMaskedValue(getMaskedValue(value));\n      setUnmaskedValue(getUnMaskedValue(value));\n    } else {\n      setMaskedValue(initialMaskedValue);\n      setUnmaskedValue(initialUnMaskedValue);\n    }\n  }, [value]);\n  return React.createElement(React.Fragment, null, React.createElement(TextInput, _extends({\n    onChangeText: function onChangeText(value) {\n      return onChange(value);\n    },\n    ref: ref,\n    maxLength: pattern.length || undefined\n  }, rest, {\n    value: actualValue,\n    style: _objectSpread({}, styleSheet)\n  })), inputAccessoryView);\n};\nexport var MaskedTextInput = forwardRef(MaskedTextInputComponent);","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","forwardRef","mask","unMask","MaskedTextInputComponent","_ref","ref","pattern","type","options","defaultValue","onChangeText","value","inputAccessoryView","autoCapitalize","textBold","textItalic","textDecoration","style","rest","styleSheet","fontWeight","fontStyle","textDecorationLine","getMaskedValue","getUnMaskedValue","defaultValueCustom","defaultValueCurrency","initialRawValue","initialMaskedValue","initialUnMaskedValue","maskedValue","setMaskedValue","unMaskedValue","setUnmaskedValue","rawValue","setRawValue","actualValue","onChange","newUnMaskedValue","newMaskedValue","TextInput","maxLength","length","undefined","MaskedTextInput"],"sources":["MaskedTextInput.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n  forwardRef,\n  ForwardRefRenderFunction,\n} from 'react'\nimport { TextInput, TextInputProps } from 'react-native'\nimport { mask, unMask } from '../utils/mask'\nimport type { FormatType, MaskOptions, StyleObj, TextDecorationOptions } from 'src/@types'\n\n\ntype TIProps = Omit<TextInputProps, 'onChangeText'>\nexport interface MaskedTextInputProps extends TIProps {\n  mask?: string\n  type?: FormatType\n  options?: MaskOptions\n  defaultValue?: string\n  onChangeText: (text: string, rawText: string) => void\n  inputAccessoryView?: JSX.Element\n  autoCapitalize?: 'characters' | 'words' | 'sentences' | 'none'\n  textBold?: boolean\n  textItalic?:boolean\n  textDecoration?:TextDecorationOptions\n  style?: StyleObj\n}\n\nexport const MaskedTextInputComponent: ForwardRefRenderFunction<\n  TextInput,\n  MaskedTextInputProps\n> = (\n  {\n    mask: pattern = '',\n    type = 'custom',\n    options = {} as MaskOptions,\n    defaultValue,\n    onChangeText,\n    value,\n    inputAccessoryView,\n    autoCapitalize = 'sentences',\n    textBold,\n    textItalic,\n    textDecoration,\n    style,\n    ...rest\n  },\n  ref\n): JSX.Element => {\n  const styleSheet = {\n    ...(typeof style === 'object' ? style : {}),\n    fontWeight:textBold && 'bold',\n    fontStyle: textItalic && 'italic',\n    textDecorationLine: textDecoration\n  }\n  const getMaskedValue = (value: string) =>\n    mask(value, pattern, type, options, autoCapitalize)\n  const getUnMaskedValue = (value: string) =>\n    unMask(value, type as 'custom' | 'currency')\n\n  const defaultValueCustom = defaultValue || ''\n  const defaultValueCurrency = defaultValue || '0'\n\n  const initialRawValue = value;\n\n  const initialMaskedValue = getMaskedValue(\n    type === 'currency' ? defaultValueCurrency : defaultValueCustom\n  )\n\n  const initialUnMaskedValue = getUnMaskedValue(\n    type === 'currency' ? defaultValueCurrency : defaultValueCustom\n  )\n\n  const [maskedValue, setMaskedValue] = useState(initialMaskedValue)\n  const [unMaskedValue, setUnmaskedValue] = useState(initialUnMaskedValue)\n  const [rawValue, setRawValue] = useState(initialRawValue);\n  const actualValue = pattern || type === \"currency\" ? maskedValue : rawValue;\n\n  function onChange(value: string) {\n    const newUnMaskedValue = unMask(value, type as 'custom' | 'currency')\n    const newMaskedValue = mask(newUnMaskedValue, pattern, type, options)\n\n    setMaskedValue(newMaskedValue)\n    setUnmaskedValue(newUnMaskedValue)\n    setRawValue(value);\n  }\n\n  useEffect(() => {\n    onChangeText(maskedValue, unMaskedValue)\n  }, [maskedValue, unMaskedValue])\n\n  useEffect(() => {\n    if (value) {\n      setMaskedValue(getMaskedValue(value))\n      setUnmaskedValue(getUnMaskedValue(value))\n    } else {\n      setMaskedValue(initialMaskedValue)\n      setUnmaskedValue(initialUnMaskedValue)\n    }\n  }, [value])\n\n  return (\n    <>\n      <TextInput\n        onChangeText={(value) => onChange(value)}\n        ref={ref}\n        maxLength={pattern.length || undefined}\n        {...rest}\n        value={actualValue}\n        style={{...styleSheet} as StyleObj}\n      />\n      {inputAccessoryView}\n    </>\n  )\n}\n\nexport const MaskedTextInput = forwardRef(MaskedTextInputComponent)\n"]},"metadata":{},"sourceType":"module"}