{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useAnimatedValue from \"./useAnimatedValue\";\n\nvar getTranslateX = function getTranslateX(position, routes, getTabWidth, gap) {\n  var inputRange = routes.map(function (_, i) {\n    return i;\n  });\n  var outputRange = routes.reduce(function (acc, _, i) {\n    if (i === 0) return [0];\n    return [].concat(_toConsumableArray(acc), [acc[i - 1] + getTabWidth(i - 1) + (gap !== null && gap !== void 0 ? gap : 0)]);\n  }, []);\n  var translateX = position.interpolate({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    extrapolate: 'clamp'\n  });\n  return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n};\n\nexport default function TabBarIndicator(_ref) {\n  var getTabWidth = _ref.getTabWidth,\n      layout = _ref.layout,\n      navigationState = _ref.navigationState,\n      position = _ref.position,\n      width = _ref.width,\n      gap = _ref.gap,\n      style = _ref.style;\n  var isIndicatorShown = React.useRef(false);\n  var isWidthDynamic = width === 'auto';\n  var opacity = useAnimatedValue(isWidthDynamic ? 0 : 1);\n  var indicatorVisible = isWidthDynamic ? layout.width && navigationState.routes.slice(0, navigationState.index).every(function (_, r) {\n    return getTabWidth(r);\n  }) : true;\n  React.useEffect(function () {\n    var fadeInIndicator = function fadeInIndicator() {\n      if (!isIndicatorShown.current && isWidthDynamic && indicatorVisible) {\n        isIndicatorShown.current = true;\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true\n        }).start();\n      }\n    };\n\n    fadeInIndicator();\n    return function () {\n      return opacity.stopAnimation();\n    };\n  }, [indicatorVisible, isWidthDynamic, opacity]);\n  var routes = navigationState.routes;\n  var transform = [];\n\n  if (layout.width) {\n    var translateX = routes.length > 1 ? getTranslateX(position, routes, getTabWidth, gap) : 0;\n    transform.push({\n      translateX: translateX\n    });\n  }\n\n  if (width === 'auto') {\n    var inputRange = routes.map(function (_, i) {\n      return i;\n    });\n    var outputRange = inputRange.map(getTabWidth);\n    transform.push({\n      scaleX: routes.length > 1 ? position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: 'clamp'\n      }) : outputRange[0]\n    }, {\n      translateX: 0.5\n    });\n  }\n\n  return React.createElement(Animated.View, {\n    style: [styles.indicator, {\n      width: width === 'auto' ? 1 : width\n    }, layout.width && Platform.OS !== 'macos' ? {\n      left: 0\n    } : {\n      left: 100 / routes.length * navigationState.index + \"%\"\n    }, {\n      transform: transform\n    }, width === 'auto' ? {\n      opacity: opacity\n    } : null, style]\n  });\n}\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useAnimatedValue","getTranslateX","position","routes","getTabWidth","gap","inputRange","map","_","i","outputRange","reduce","acc","translateX","interpolate","extrapolate","Animated","multiply","I18nManager","isRTL","TabBarIndicator","layout","navigationState","width","style","isIndicatorShown","useRef","isWidthDynamic","opacity","indicatorVisible","slice","index","every","r","useEffect","fadeInIndicator","current","timing","toValue","duration","easing","Easing","in","linear","useNativeDriver","start","stopAnimation","transform","length","push","scaleX","View","styles","indicator","Platform","OS","left","StyleSheet","create","backgroundColor","bottom","right","height"],"sources":["TabBarIndicator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n} from 'react-native';\n\nimport type { NavigationState, Route, SceneRendererProps } from './types';\nimport useAnimatedValue from './useAnimatedValue';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n  gap?: number;\n};\n\nconst getTranslateX = (\n  position: Animated.AnimatedInterpolation,\n  routes: Route[],\n  getTabWidth: GetTabWidth,\n  gap?: number\n) => {\n  const inputRange = routes.map((_, i) => i);\n\n  // every index contains widths at all previous indices\n  const outputRange = routes.reduce<number[]>((acc, _, i) => {\n    if (i === 0) return [0];\n    return [...acc, acc[i - 1] + getTabWidth(i - 1) + (gap ?? 0)];\n  }, []);\n\n  const translateX = position.interpolate({\n    inputRange,\n    outputRange,\n    extrapolate: 'clamp',\n  });\n\n  return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n};\n\nexport default function TabBarIndicator<T extends Route>({\n  getTabWidth,\n  layout,\n  navigationState,\n  position,\n  width,\n  gap,\n  style,\n}: Props<T>) {\n  const isIndicatorShown = React.useRef(false);\n  const isWidthDynamic = width === 'auto';\n\n  const opacity = useAnimatedValue(isWidthDynamic ? 0 : 1);\n\n  const indicatorVisible = isWidthDynamic\n    ? layout.width &&\n      navigationState.routes\n        .slice(0, navigationState.index)\n        .every((_, r) => getTabWidth(r))\n    : true;\n\n  React.useEffect(() => {\n    const fadeInIndicator = () => {\n      if (\n        !isIndicatorShown.current &&\n        isWidthDynamic &&\n        // We should fade-in the indicator when we have widths for all the tab items\n        indicatorVisible\n      ) {\n        isIndicatorShown.current = true;\n\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    fadeInIndicator();\n\n    return () => opacity.stopAnimation();\n  }, [indicatorVisible, isWidthDynamic, opacity]);\n\n  const { routes } = navigationState;\n\n  const transform = [];\n\n  if (layout.width) {\n    const translateX =\n      routes.length > 1 ? getTranslateX(position, routes, getTabWidth, gap) : 0;\n\n    transform.push({ translateX });\n  }\n\n  if (width === 'auto') {\n    const inputRange = routes.map((_, i) => i);\n    const outputRange = inputRange.map(getTabWidth);\n\n    transform.push(\n      {\n        scaleX:\n          routes.length > 1\n            ? position.interpolate({\n                inputRange,\n                outputRange,\n                extrapolate: 'clamp',\n              })\n            : outputRange[0],\n      },\n      { translateX: 0.5 }\n    );\n  }\n\n  return (\n    <Animated.View\n      style={[\n        styles.indicator,\n        { width: width === 'auto' ? 1 : width },\n        // If layout is not available, use `left` property for positioning the indicator\n        // This avoids rendering delay until we are able to calculate translateX\n        // If platform is macos use `left` property as `transform` is broken at the moment.\n        // See: https://github.com/microsoft/react-native-macos/issues/280\n        layout.width && Platform.OS !== 'macos'\n          ? { left: 0 }\n          : { left: `${(100 / routes.length) * navigationState.index}%` },\n        { transform },\n        width === 'auto' ? { opacity: opacity } : null,\n        style,\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}