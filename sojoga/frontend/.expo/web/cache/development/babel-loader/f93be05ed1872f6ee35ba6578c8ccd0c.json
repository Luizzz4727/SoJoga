{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport useAnimatedValue from \"./useAnimatedValue\";\n\nvar getTranslateX = function getTranslateX(position, routes, getTabWidth, gap) {\n  var inputRange = routes.map(function (_, i) {\n    return i;\n  });\n  var outputRange = routes.reduce(function (acc, _, i) {\n    if (i === 0) return [0];\n    return [].concat(_toConsumableArray(acc), [acc[i - 1] + getTabWidth(i - 1) + (gap !== null && gap !== void 0 ? gap : 0)]);\n  }, []);\n  var translateX = position.interpolate({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    extrapolate: 'clamp'\n  });\n  return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n};\n\nexport default function TabBarIndicator(_ref) {\n  var getTabWidth = _ref.getTabWidth,\n      layout = _ref.layout,\n      navigationState = _ref.navigationState,\n      position = _ref.position,\n      width = _ref.width,\n      gap = _ref.gap,\n      style = _ref.style;\n  var isIndicatorShown = React.useRef(false);\n  var isWidthDynamic = width === 'auto';\n  var opacity = useAnimatedValue(isWidthDynamic ? 0 : 1);\n  var indicatorVisible = isWidthDynamic ? layout.width && navigationState.routes.slice(0, navigationState.index).every(function (_, r) {\n    return getTabWidth(r);\n  }) : true;\n  React.useEffect(function () {\n    var fadeInIndicator = function fadeInIndicator() {\n      if (!isIndicatorShown.current && isWidthDynamic && indicatorVisible) {\n        isIndicatorShown.current = true;\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true\n        }).start();\n      }\n    };\n\n    fadeInIndicator();\n    return function () {\n      return opacity.stopAnimation();\n    };\n  }, [indicatorVisible, isWidthDynamic, opacity]);\n  var routes = navigationState.routes;\n  var transform = [];\n\n  if (layout.width) {\n    var translateX = routes.length > 1 ? getTranslateX(position, routes, getTabWidth, gap) : 0;\n    transform.push({\n      translateX: translateX\n    });\n  }\n\n  if (width === 'auto') {\n    var inputRange = routes.map(function (_, i) {\n      return i;\n    });\n    var outputRange = inputRange.map(getTabWidth);\n    transform.push({\n      scaleX: routes.length > 1 ? position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: 'clamp'\n      }) : outputRange[0]\n    }, {\n      translateX: 0.5\n    });\n  }\n\n  return React.createElement(Animated.View, {\n    style: [styles.indicator, {\n      width: width === 'auto' ? 1 : width\n    }, layout.width && Platform.OS !== 'macos' ? {\n      left: 0\n    } : {\n      left: 100 / routes.length * navigationState.index + \"%\"\n    }, {\n      transform: transform\n    }, width === 'auto' ? {\n      opacity: opacity\n    } : null, style]\n  });\n}\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"sources":["TabBarIndicator.tsx"],"names":["getTranslateX","inputRange","routes","outputRange","i","acc","getTabWidth","gap","translateX","extrapolate","Animated","I18nManager","style","isIndicatorShown","React","isWidthDynamic","width","opacity","useAnimatedValue","indicatorVisible","layout","navigationState","fadeInIndicator","toValue","duration","easing","Easing","useNativeDriver","transform","scaleX","styles","Platform","left","index","indicator","backgroundColor","position","bottom","right","height"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;AAYA,OAAA,gBAAA;;AAYA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAA,GAAA,EAKjB;EACH,IAAMC,UAAU,GAAGC,MAAM,CAANA,GAAAA,CAAW,UAAA,CAAA,EAAA,CAAA;IAAA,OAD3B,CAC2B;EAAA,CAAXA,CAAnB;EAGA,IAAMC,WAAW,GAAG,MAAM,CAAN,MAAA,CAAwB,UAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAe;IACzD,IAAIC,CAAC,KAAL,CAAA,EAAa,OAAO,CAAP,CAAO,CAAP;IACb,oCAAO,GAAP,IAAgBC,GAAG,CAACD,CAAC,GAALC,CAAG,CAAHA,GAAaC,WAAW,CAACF,CAAC,GAA1BC,CAAwB,CAAxBA,IAAmCE,GAAnCF,KAAAA,IAAmCE,IAAAA,GAAnCF,KAAAA,KAAAA,CAAmCE,GAAnCF,GAAmCE,GAAnD,CAAgBF,CAAhB;EAFkB,CAAA,EAApB,EAAoB,CAApB;EAKA,IAAMG,UAAU,GAAG,QAAQ,CAAR,WAAA,CAAqB;IACtCP,UADsC,EACtCA,UADsC;IAEtCE,WAFsC,EAEtCA,WAFsC;IAGtCM,WAAW,EAAE;EAHyB,CAArB,CAAnB;EAMA,OAAOC,QAAQ,CAARA,QAAAA,CAAAA,UAAAA,EAA8BC,WAAW,CAAXA,KAAAA,GAAoB,CAApBA,CAAAA,GAArC,CAAOD,CAAP;AApBF,CAAA;;AAuBA,eAAe,SAAA,eAAA,CAAA,IAAA,EAQF;EAR4C,IAAA,WAAA,GAQ5C,IAR4C,CAAA,WAAA;EAAA,IAAA,MAAA,GAQ5C,IAR4C,CAAA,MAAA;EAAA,IAAA,eAAA,GAQ5C,IAR4C,CAAA,eAAA;EAAA,IAAA,QAAA,GAQ5C,IAR4C,CAAA,QAAA;EAAA,IAAA,KAAA,GAQ5C,IAR4C,CAAA,KAAA;EAAA,IAAA,GAAA,GAQ5C,IAR4C,CAAA,GAAA;EAAA,IAOvDE,KAPuD,GAQ5C,IAR4C,CAOvDA,KAPuD;EASvD,IAAMC,gBAAgB,GAAGC,KAAK,CAALA,MAAAA,CAAzB,KAAyBA,CAAzB;EACA,IAAMC,cAAc,GAAGC,KAAK,KAA5B,MAAA;EAEA,IAAMC,OAAO,GAAGC,gBAAgB,CAACH,cAAc,GAAA,CAAA,GAA/C,CAAgC,CAAhC;EAEA,IAAMI,gBAAgB,GAAGJ,cAAc,GACnCK,MAAM,CAANA,KAAAA,IACAC,eAAe,CAAfA,MAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EACYA,eAAe,CAD3BA,KAAAA,EAAAA,KAAAA,CAES,UAAA,CAAA,EAAA,CAAA;IAAA,OAAUf,WAAW,CAJK,CAIL,CAArB;EAAA,CAFTe,CAFmC,GAAvC,IAAA;EAOAP,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;MAC5B,IACE,CAACT,gBAAgB,CAAjB,OAAA,IAAA,cAAA,IADF,gBAAA,EAKE;QACAA,gBAAgB,CAAhBA,OAAAA,GAAAA,IAAAA;QAEAH,QAAQ,CAARA,MAAAA,CAAAA,OAAAA,EAAyB;UACvBa,OAAO,EADgB,CAAA;UAEvBC,QAAQ,EAFe,GAAA;UAGvBC,MAAM,EAAEC,MAAM,CAANA,EAAAA,CAAUA,MAAM,CAHD,MAGfA,CAHe;UAIvBC,eAAe,EAAE;QAJM,CAAzBjB,EAAAA,KAAAA;MAMD;IAfH,CAAA;;IAkBAY,eAAe;IAEf,OAAO;MAAA,OAAML,OAAO,CAApB,aAAaA,EAAN;IAAA,CAAP;EArBFH,CAAAA,EAsBG,CAAA,gBAAA,EAAA,cAAA,EAtBHA,OAsBG,CAtBHA;EAwBA,IAAQZ,MAAR,GAAA,eAAA,CAAQA,MAAR;EAEA,IAAM0B,SAAS,GAAf,EAAA;;EAEA,IAAIR,MAAM,CAAV,KAAA,EAAkB;IAChB,IAAMZ,UAAU,GACdN,MAAM,CAANA,MAAAA,GAAAA,CAAAA,GAAoBF,aAAa,CAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAjCE,GAAiC,CAAjCA,GADF,CAAA;IAGA0B,SAAS,CAATA,IAAAA,CAAe;MAAEpB,UAAAA,EAAAA;IAAF,CAAfoB;EACD;;EAED,IAAIZ,KAAK,KAAT,MAAA,EAAsB;IACpB,IAAMf,UAAU,GAAGC,MAAM,CAANA,GAAAA,CAAW,UAAA,CAAA,EAAA,CAAA;MAAA,OAA9B,CAA8B;IAAA,CAAXA,CAAnB;IACA,IAAMC,WAAW,GAAGF,UAAU,CAAVA,GAAAA,CAApB,WAAoBA,CAApB;IAEA2B,SAAS,CAATA,IAAAA,CACE;MACEC,MAAM,EACJ,MAAM,CAAN,MAAA,GAAA,CAAA,GACI,QAAQ,CAAR,WAAA,CAAqB;QACnB5B,UADmB,EACnBA,UADmB;QAEnBE,WAFmB,EAEnBA,WAFmB;QAGnBM,WAAW,EAAE;MAHM,CAArB,CADJ,GAMIN,WAAW,CAAA,CAAA;IARnB,CADFyB,EAWE;MAAEpB,UAAU,EAAE;IAAd,CAXFoB;EAaD;;EAED,OACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;IACE,KAAK,EAAE,CACLE,MAAM,CADD,SAAA,EAEL;MAAEd,KAAK,EAAEA,KAAK,KAALA,MAAAA,GAAAA,CAAAA,GAAuBA;IAAhC,CAFK,EAOLI,MAAM,CAANA,KAAAA,IAAgBW,QAAQ,CAARA,EAAAA,KAAhBX,OAAAA,GACI;MAAEY,IAAI,EAAE;IAAR,CADJZ,GAEI;MAAEY,IAAI,EAAM,MAAM9B,MAAM,CAAb,MAAC,GAAuBmB,eAAe,CAACY,KAA7C;IAAN,CATC,EAUL;MAAEL,SAAAA,EAAAA;IAAF,CAVK,EAWL,KAAK,KAAL,MAAA,GAAmB;MAAEX,OAAO,EAAEA;IAAX,CAAnB,GAXK,IAAA,EAAA,KAAA;EADT,CAAA,CADF;AAkBD;AAED,IAAMa,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BI,SAAS,EAAE;IACTC,eAAe,EADN,SAAA;IAETC,QAAQ,EAFC,UAAA;IAGTJ,IAAI,EAHK,CAAA;IAITK,MAAM,EAJG,CAAA;IAKTC,KAAK,EALI,CAAA;IAMTC,MAAM,EAAE;EANC;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n} from 'react-native';\n\nimport type { NavigationState, Route, SceneRendererProps } from './types';\nimport useAnimatedValue from './useAnimatedValue';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n  gap?: number;\n};\n\nconst getTranslateX = (\n  position: Animated.AnimatedInterpolation,\n  routes: Route[],\n  getTabWidth: GetTabWidth,\n  gap?: number\n) => {\n  const inputRange = routes.map((_, i) => i);\n\n  // every index contains widths at all previous indices\n  const outputRange = routes.reduce<number[]>((acc, _, i) => {\n    if (i === 0) return [0];\n    return [...acc, acc[i - 1] + getTabWidth(i - 1) + (gap ?? 0)];\n  }, []);\n\n  const translateX = position.interpolate({\n    inputRange,\n    outputRange,\n    extrapolate: 'clamp',\n  });\n\n  return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n};\n\nexport default function TabBarIndicator<T extends Route>({\n  getTabWidth,\n  layout,\n  navigationState,\n  position,\n  width,\n  gap,\n  style,\n}: Props<T>) {\n  const isIndicatorShown = React.useRef(false);\n  const isWidthDynamic = width === 'auto';\n\n  const opacity = useAnimatedValue(isWidthDynamic ? 0 : 1);\n\n  const indicatorVisible = isWidthDynamic\n    ? layout.width &&\n      navigationState.routes\n        .slice(0, navigationState.index)\n        .every((_, r) => getTabWidth(r))\n    : true;\n\n  React.useEffect(() => {\n    const fadeInIndicator = () => {\n      if (\n        !isIndicatorShown.current &&\n        isWidthDynamic &&\n        // We should fade-in the indicator when we have widths for all the tab items\n        indicatorVisible\n      ) {\n        isIndicatorShown.current = true;\n\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    fadeInIndicator();\n\n    return () => opacity.stopAnimation();\n  }, [indicatorVisible, isWidthDynamic, opacity]);\n\n  const { routes } = navigationState;\n\n  const transform = [];\n\n  if (layout.width) {\n    const translateX =\n      routes.length > 1 ? getTranslateX(position, routes, getTabWidth, gap) : 0;\n\n    transform.push({ translateX });\n  }\n\n  if (width === 'auto') {\n    const inputRange = routes.map((_, i) => i);\n    const outputRange = inputRange.map(getTabWidth);\n\n    transform.push(\n      {\n        scaleX:\n          routes.length > 1\n            ? position.interpolate({\n                inputRange,\n                outputRange,\n                extrapolate: 'clamp',\n              })\n            : outputRange[0],\n      },\n      { translateX: 0.5 }\n    );\n  }\n\n  return (\n    <Animated.View\n      style={[\n        styles.indicator,\n        { width: width === 'auto' ? 1 : width },\n        // If layout is not available, use `left` property for positioning the indicator\n        // This avoids rendering delay until we are able to calculate translateX\n        // If platform is macos use `left` property as `transform` is broken at the moment.\n        // See: https://github.com/microsoft/react-native-macos/issues/280\n        layout.width && Platform.OS !== 'macos'\n          ? { left: 0 }\n          : { left: `${(100 / routes.length) * navigationState.index}%` },\n        { transform },\n        width === 'auto' ? { opacity: opacity } : null,\n        style,\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}